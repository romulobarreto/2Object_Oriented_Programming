'''
üìå O que √© cls?
	‚Ä¢	cls √© usado em m√©todos de classe para se referir √† pr√≥pria classe, assim como self se refere √† inst√¢ncia.
	‚Ä¢	Ele √© comumente utilizado em m√©todos de classe (decorados com @classmethod).
	‚Ä¢	Com cls, podemos acessar ou modificar atributos de classe e at√© criar novas inst√¢ncias dentro da classe.
'''

class Employee:
    """
    A class to represent an employee.
    """

    # Class attribute (shared by all instances)
    company_name = "TechCorp"
    total_employees = 0

    def __init__(self, name, position, salary):
        """
        Constructor method that initializes instance attributes.
        """
        self.name = name        # Instance attribute
        self.position = position  # Instance attribute
        self.salary = salary    # Instance attribute

        # Increment total employees when a new instance is created
        Employee.total_employees += 1

    def display_info(self):
        """
        Displays employee details.
        """
        print(f"üë®‚Äçüíº Employee: {self.name}, Position: {self.position}, Salary: ${self.salary}")

    @classmethod
    def update_company_name(cls, new_name):
        """
        Class method that updates the company name using cls.
        """
        cls.company_name = new_name  # Modifies the class attribute

    @classmethod
    def from_string(cls, employee_str):
        """
        Alternative constructor that creates an Employee instance from a string.
        Example input: 'Alice Johnson,Software Engineer,75000'
        """
        name, position, salary = employee_str.split(",")
        return cls(name, position, float(salary))  # Creating an instance using cls

# ==== TESTING THE CLASS ====
if __name__ == "__main__":
    # Creating employees using the constructor
    emp1 = Employee("Alice Johnson", "Software Engineer", 75000)
    emp2 = Employee("Bob Smith", "Data Analyst", 65000)

    # Displaying employee details
    emp1.display_info()
    emp2.display_info()

    # Checking company name before change
    print(f"\nüè¢ Company Name: {Employee.company_name}")

    # Updating the company name using cls in a class method
    Employee.update_company_name("NextGen Tech")
    print(f"üè¢ Updated Company Name: {Employee.company_name}")

    # Creating an employee using the alternative constructor (from_string)
    emp3 = Employee.from_string("Charlie Brown,HR Manager,70000")
    emp3.display_info()

    # Checking total employees (updated using cls)
    print(f"\nüìä Total Employees: {Employee.total_employees}")

'''
üìå Explica√ß√£o do C√≥digo
	1.	Criamos a classe Employee com um atributo de classe company_name e total_employees.
	‚Ä¢	company_name √© compartilhado por todas as inst√¢ncias.
	‚Ä¢	total_employees √© atualizado sempre que um novo funcion√°rio √© criado.
	2.	Criamos o m√©todo display_info(), que exibe os detalhes de um funcion√°rio.
	3.	Criamos um m√©todo de classe update_company_name() que altera company_name.
	‚Ä¢	Usa cls.company_name para modificar o atributo da classe, afetando todas as inst√¢ncias.
	4.	Criamos um m√©todo de classe from_string(), que permite criar um Employee a partir de uma string.
	‚Ä¢	Ele recebe um formato como "Nome,Posi√ß√£o,Sal√°rio", divide os valores e cria um novo objeto com cls(nome, posi√ß√£o, sal√°rio).
	5.	Testamos a classe:
	‚Ä¢	Criamos emp1 e emp2, exibimos seus dados e verificamos o nome da empresa.
	‚Ä¢	Chamamos update_company_name("NextGen Tech") para alterar company_name globalmente.
	‚Ä¢	Criamos emp3 usando from_string(), mostrando como cls √© usado para criar novas inst√¢ncias.
	‚Ä¢	Exibimos total_employees para confirmar que foi atualizado corretamente.

üí° Resumo

‚úÖ cls representa a classe, assim como self representa a inst√¢ncia.
‚úÖ M√©todos de classe usam @classmethod e cls para modificar atributos de classe.
‚úÖ Podemos usar cls para criar novas inst√¢ncias dentro da pr√≥pria classe.
‚úÖ √ötil para m√©todos utilit√°rios que lidam com dados da classe e n√£o apenas de inst√¢ncias individuais.
'''