'''
üìå Exerc√≠cio: Contador de Usu√°rios com Atributos de Classe

Objetivo:

O objetivo deste exerc√≠cio √© entender a diferen√ßa entre atributos de inst√¢ncia (que pertencem a cada objeto) e atributos de classe (que pertencem √† classe e s√£o compartilhados por todos os objetos).

Instru√ß√µes:
	1.	Crie uma classe chamada Usuario.
	2.	Defina os seguintes atributos:
	‚Ä¢	Um atributo de classe chamado total_usuarios, inicializado como 0.
	‚Ä¢	Tr√™s atributos de inst√¢ncia:
	‚Ä¢	nome (o nome do usu√°rio)
	‚Ä¢	email (o e-mail do usu√°rio)
	‚Ä¢	idade (a idade do usu√°rio)
	3.	No m√©todo __init__, toda vez que um novo usu√°rio for criado, o atributo de classe total_usuarios deve ser incrementado em 1.
	4.	Crie um m√©todo chamado exibir_perfil(self), que retorna uma string com os detalhes do usu√°rio no seguinte formato:

    Nome: Jo√£o Silva
    Email: joao@email.com
    Idade: 30 anos

    5.	Crie um m√©todo de classe chamado quantidade_usuarios(cls), que retorna a quantidade total de usu√°rios cadastrados.
	6.	No final do c√≥digo:
	‚Ä¢	Crie tr√™s objetos da classe Usuario.
	‚Ä¢	Chame exibir_perfil() para cada usu√°rio.
	‚Ä¢	Exiba a quantidade total de usu√°rios cadastrados chamando Usuario.quantidade_usuarios().

üí° Dica:
	‚Ä¢	O atributo de classe total_usuarios deve ser acessado como Usuario.total_usuarios.
	‚Ä¢	O m√©todo de classe precisa ter @classmethod e usar cls em vez de self.

üöÄ Desafio Extra:

    Adicione um m√©todo resetar_contagem(cls), que redefine total_usuarios para 0.
'''

class User:
    total_usuarios = 0  # Atributo de classe

    def __init__(self, nome, email, idade):
        self.nome = nome
        self.email = email
        self.idade = idade
        type(self).total_usuarios += 1  # Atualizando o contador da classe

    def salvar(self):
        return {
            "nome": self.nome,
            "email": self.email,
            "idade": self.idade
        }
    
    def __str__(self):
        return f"Nome: {self.nome}\nEmail: {self.email}\nIdade: {self.idade}"
    
    @classmethod
    def quantidade_usuarios(cls):  # Renomeado para seguir padr√£o descritivo
        return cls.total_usuarios  # Agora acessando pelo cls

    @classmethod
    def resetar_contagem(cls):  # Renomeado para seguir padr√£o do enunciado
        cls.total_usuarios = 0  # Agora acessando pelo cls

# Criando usu√°rios
user1 = User('Romulo', 'romubah@gmail.com', 25)
user2 = User('Myllene', 'myllenespilma5@gmail.com', 24)
user3 = User('Patricia', 'patybage2007@hotmail.com', 50)

# Exibindo detalhes
print(user1)
print(user2)
print(user3)

# Exibindo total de usu√°rios
print("Total de usu√°rios cadastrados:", User.quantidade_usuarios())

# Resetando a contagem de usu√°rios
User.resetar_contagem()

# Exibindo total de usu√°rios ap√≥s reset
print("Total de usu√°rios ap√≥s reset:", User.quantidade_usuarios())