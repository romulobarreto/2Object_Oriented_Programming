'''
üìå Exerc√≠cio: Criando um Conversor de Moedas com M√©todos Est√°ticos

Objetivo

Neste exerc√≠cio, voc√™ criar√° uma classe que ajudar√° a converter valores entre diferentes moedas. O foco √© entender o uso de m√©todos est√°ticos (@staticmethod), que s√£o fun√ß√µes dentro de uma classe que n√£o dependem de atributos de inst√¢ncia ou atributos de classe.

Instru√ß√µes
	1.	Crie uma classe chamada ConversorMoeda para realizar convers√µes entre moedas.
	2.	Dentro da classe, crie tr√™s m√©todos est√°ticos:
	‚Ä¢	dolar_para_real(valor): Converte um valor em d√≥lares para reais, assumindo que 1 d√≥lar = 5 reais.
	‚Ä¢	real_para_dolar(valor): Converte um valor em reais para d√≥lares, assumindo que 1 real = 0.20 d√≥lares.
	‚Ä¢	exibir_taxas(): Exibe as taxas de convers√£o fixas utilizadas pelo sistema.
	3.	No final do c√≥digo, fa√ßa testes chamando os m√©todos da classe para converter valores e exibir as taxas.

üí° Dica
	‚Ä¢	M√©todos est√°ticos s√£o definidos dentro de uma classe, mas n√£o recebem self nem cls como primeiro par√¢metro.
	‚Ä¢	Para definir um m√©todo est√°tico, usamos @staticmethod acima do m√©todo.
'''

class ConversorMoeda:
    dolar_real = 5.00  
    real_dolar = 0.20  

    @staticmethod
    def obter_valor_numerico(mensagem):
        while True:
            try:
                valor = float(input(mensagem))
                if valor <= 0:
                    print("‚ùå O valor precisa ser maior que zero. Tente novamente.")
                else:
                    return valor
            except ValueError:
                print("‚ùå Entrada inv√°lida! Digite um n√∫mero v√°lido.")

    @staticmethod
    def alterar_taxa_dolar_real():
        ConversorMoeda.dolar_real = ConversorMoeda.obter_valor_numerico("Digite a nova taxa de convers√£o de d√≥lar para real: ")
        print(f"‚úÖ Taxa de c√¢mbio d√≥lar/real atualizada para {ConversorMoeda.dolar_real:.2f}.")

    @staticmethod
    def alterar_taxa_real_dolar():
        ConversorMoeda.real_dolar = ConversorMoeda.obter_valor_numerico("Digite a nova taxa de convers√£o de real para d√≥lar: ")
        print(f"‚úÖ Taxa de c√¢mbio real/d√≥lar atualizada para {ConversorMoeda.real_dolar:.2f}.")

    @staticmethod
    def dolar_para_real():
        valor = ConversorMoeda.obter_valor_numerico("Digite o valor em d√≥lar que deseja converter: $")
        resultado = valor * ConversorMoeda.dolar_real
        print(f"üíµ O resultado da convers√£o de ${valor:.2f} gera um total de R${resultado:.2f}.")

    @staticmethod
    def real_para_dolar():
        valor = ConversorMoeda.obter_valor_numerico("Digite o valor em real que deseja converter: R$")
        resultado = valor * ConversorMoeda.real_dolar
        print(f"üíµ O resultado da convers√£o de R${valor:.2f} gera um total de ${resultado:.2f}.")

    @staticmethod
    def exibir_taxas():
        print(f"üí∞ Taxas de c√¢mbio atuais:")
        print(f"üîπ D√≥lar ‚Üí Real: R${ConversorMoeda.dolar_real:.2f}")
        print(f"üîπ Real ‚Üí D√≥lar: ${ConversorMoeda.real_dolar:.2f}")

def menu():
    while True:
        print("\n=== SISTEMA DE CONVERS√ÉO DE MOEDAS ===")
        print("1 - Exibir taxas de c√¢mbio")
        print("2 - Alterar taxa do par d√≥lar/real")
        print("3 - Alterar taxa do par real/d√≥lar")
        print("4 - Converter d√≥lar para real")
        print("5 - Converter real para d√≥lar")
        print("6 - Sair")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            ConversorMoeda.exibir_taxas()
        elif opcao == "2":
            ConversorMoeda.alterar_taxa_dolar_real()
        elif opcao == "3":
            ConversorMoeda.alterar_taxa_real_dolar()
        elif opcao == "4":
            ConversorMoeda.dolar_para_real()
        elif opcao == "5":
            ConversorMoeda.real_para_dolar()
        elif opcao == "6":
            print("üö™ Saindo do sistema...")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

if __name__ == "__main__":
    menu()