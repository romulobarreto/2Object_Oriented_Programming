'''
üìå Exerc√≠cio: Trabalhando com Atributos de Inst√¢ncia

Objetivo:

Praticar a cria√ß√£o e o uso de atributos de inst√¢ncia, que s√£o as caracter√≠sticas exclusivas de cada objeto.

üìú Instru√ß√µes:
	1.	Crie uma classe chamada Carro que represente um carro gen√©rico.
	2.	Defina tr√™s atributos de inst√¢ncia dentro do m√©todo __init__, como:
	‚Ä¢	marca (marca do carro, ex: ‚ÄúToyota‚Äù)
	‚Ä¢	modelo (modelo do carro, ex: ‚ÄúCorolla‚Äù)
	‚Ä¢	ano (ano de fabrica√ß√£o, ex: 2020)
	3.	Crie um m√©todo chamado exibir_detalhes(self) que retorne uma string com todas as informa√ß√µes do carro no seguinte formato:

    "Carro: [marca] [modelo], Ano: [ano]"

    4.	Crie dois objetos da classe Carro com diferentes valores para os atributos.
	5.	Chame o m√©todo exibir_detalhes() para exibir as informa√ß√µes de cada carro.

    üí° Dica:
	‚Ä¢	Lembre-se de que os atributos de inst√¢ncia s√£o exclusivos de cada objeto e precisam ser inicializados dentro do __init__ com self.
	‚Ä¢	Voc√™ pode imprimir a sa√≠da do m√©todo exibir_detalhes() para ver se os dados do carro aparecem corretamente.

üöÄ Desafio Extra:
    Tente criar um m√©todo idade_do_carro(self, ano_atual) que recebe o ano atual como par√¢metro e retorna quantos anos o carro tem.
'''

from datetime import datetime

class Car:
    def __init__(self, marca, modelo, ano):
        self.marca = marca
        self.modelo = modelo
        self.ano = ano

    def exibir_detalhes(self):
        return {
            "marca": self.marca,
            "modelo": self.modelo,
            "ano": self.ano
        }
    
    def idade_do_carro(self):
        ano_atual = datetime.now().year
        idade = ano_atual - self.ano
        return idade
    
    def __str__(self):
        return f"Ve√≠culo da marca: {self.marca}, modelo: {self.modelo}, ano de fabrica√ß√£o: {self.ano}. Esse ve√≠culo tem {self.idade_do_carro()} anos."
    
car1 = Car('Honda', 'Civic', 2010)

print(car1)

print(car1.idade_do_carro())

print(car1.exibit_detalhes())