'''
üìå Explica√ß√£o

A sobreposi√ß√£o de m√©todos ocorre quando uma classe filha redefine um m√©todo da classe pai, modificando seu comportamento. Isso permite personalizar m√©todos herdados para se adequarem melhor √† classe filha.
'''

# Superclasse
class Animal:
    def make_sound(self):
        return "Some generic animal sound"

# Subclasse que sobrep√µe o m√©todo make_sound
class Dog(Animal):
    def make_sound(self):
        return "Woof! Woof!"  # Som espec√≠fico para um cachorro

# Subclasse que sobrep√µe o m√©todo make_sound
class Cat(Animal):
    def make_sound(self):
        return "Meow! Meow!"  # Som espec√≠fico para um gato

# Testando a sobreposi√ß√£o de m√©todos
if __name__ == "__main__":
    generic_animal = Animal()
    dog = Dog()
    cat = Cat()

    print("Animal gen√©rico faz som:", generic_animal.make_sound())  # Sa√≠da: Some generic animal sound
    print("Cachorro faz som:", dog.make_sound())  # Sa√≠da: Woof! Woof!
    print("Gato faz som:", cat.make_sound())  # Sa√≠da: Meow! Meow!

'''
üîç O que acontece aqui?
	1.	Classe Animal
	‚Ä¢	Define um m√©todo make_sound gen√©rico.
	2.	Classes Dog e Cat
	‚Ä¢	Herdam de Animal e redefinem (override) o m√©todo make_sound, fornecendo um som espec√≠fico.
	3.	Testes no bloco if __name__ == "__main__":
	‚Ä¢	Criamos inst√¢ncias de Animal, Dog e Cat e chamamos make_sound para cada um.
	‚Ä¢	O m√©todo sobreposto √© executado de acordo com a classe correspondente.
'''