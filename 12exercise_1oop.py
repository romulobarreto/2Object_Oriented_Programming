'''
ğŸ“Œ ExercÃ­cio: Modelagem de um Animal em OrientaÃ§Ã£o a Objetos

Objetivo:
VocÃª deve criar uma classe para representar um animal em um sistema de zoolÃ³gico. O foco deste exercÃ­cio Ã© entender como modelar um objeto no mundo real em uma classe com atributos e mÃ©todos.

InstruÃ§Ãµes:
	1.	Crie uma classe chamada Animal que represente um animal genÃ©rico.
	2.	Defina trÃªs atributos que todo animal tem. Por exemplo, vocÃª pode escolher atributos como:
	â€¢	nome (nome do animal)
	â€¢	especie (espÃ©cie do animal)
	â€¢	idade (idade do animal)
	3.	Crie um mÃ©todo chamado emitir_som(self), que imprime uma mensagem genÃ©rica como "O animal faz um som."
	4.	No final do cÃ³digo, crie um objeto da classe Animal, fornecendo valores para os atributos.
	5.	Chame o mÃ©todo emitir_som() para testar a classe.

ğŸ’¡ Dica: VocÃª deve usar o mÃ©todo especial __init__ para inicializar os atributos.

ğŸš€ Desafio extra: Tente criar mais mÃ©todos que representem aÃ§Ãµes comuns de um animal, como comer() ou dormir().
'''

class Animal:
    def __init__(self, especie, ambiente, idade):
        self.especie = especie
        self.ambiente = ambiente
        self.idade = idade
    
    def emitir_som(self):
        return f"O animal estÃ¡ fazendo um som."
    
    def dormir(self):
        return f"O animal estÃ¡ dormindo."
    
    def comer(self):
        return f"O animal estÃ¡ comendo."

    def mostrar_dados(self):
        return {
            "especie": self.especie,
            "ambiente": self.ambiente,
            "idade": self.idade
        }

    def __str__(self):
        return f"O animal Ã©: {self.especie}, vive em um ambiente: {self.ambiente}, tem: {self.idade} anos de idade."
    
cachorro = Animal('cachorro', 'domestico', 5)

print(cachorro.idade)

print(cachorro.emitir_som())

print(cachorro.dormir())

print(cachorro.comer())

print(cachorro)