'''
üìå Passo a passo para escolher o m√©todo certo

üî∑ 1. Esse m√©todo precisa acessar informa√ß√µes da classe (cls)?
‚û° SIM ‚Üí Use @classmethod.
‚û° N√ÉO ‚Üí V√° para a pr√≥xima pergunta.

üî∑ 2. Esse m√©todo precisa acessar informa√ß√µes do objeto (self)?
‚û° SIM ‚Üí N√£o use @staticmethod nem @classmethod, use um m√©todo normal!
‚û° N√ÉO ‚Üí V√° para a pr√≥xima pergunta.

üî∑ 3. Esse m√©todo apenas realiza uma a√ß√£o auxiliar (ex: valida√ß√£o, convers√£o, c√°lculo)?
‚û° SIM ‚Üí Use @staticmethod.
‚û° N√ÉO ‚Üí Provavelmente deveria ser um @classmethod ou um m√©todo de inst√¢ncia (self).

üî∑ 4. Esse m√©todo precisa criar um novo objeto da classe?
‚û° SIM ‚Üí Use @classmethod, porque ele pode chamar cls() para criar um objeto.
‚û° N√ÉO ‚Üí Se ele n√£o usa self nem cls, ent√£o √© @staticmethod.

‚∏ª

üöÄ Aplicando esse passo a passo na sua d√∫vida dos inputs

Agora, vamos usar esse m√©todo de perguntas para decidir onde colocar os input():
	‚Ä¢	Os inputs precisam acessar atributos do objeto (self)? ‚ùå N√£o.
	‚Ä¢	Os inputs precisam acessar a classe (cls)? ‚úÖ Sim, porque eles v√£o criar um novo objeto.
	‚Ä¢	Os inputs s√£o apenas auxiliares e n√£o precisam criar nada? ‚ùå N√£o, porque no final queremos criar um objeto.

üîπ Conclus√£o: Os inputs devem ficar dentro do @classmethod, porque depois de validar os dados, vamos criar um novo objeto.

‚∏ª

üìå Resumo pr√°tico (guarde isso! üöÄ)

‚úÖ Se o m√©todo precisa criar um objeto novo ‚Üí @classmethod
‚úÖ Se o m√©todo precisa validar/processar algo, mas n√£o criar objetos ‚Üí @staticmethod
‚úÖ Se o m√©todo precisa acessar informa√ß√µes do objeto (self) ‚Üí M√©todo normal (sem @staticmethod nem @classmethod)
'''

###############################Exemplos################################

'''
üü¢ Caso 1: Os inputs precisam acessar atributos do objeto (self)?

üîπ Quando usar um m√©todo normal (sem @staticmethod nem @classmethod)
‚û° Isso acontece quando os dados inseridos precisam ser salvos dentro do objeto espec√≠fico.

üìå Exemplo: Atualizar o telefone de um cliente

Aqui, cada cliente tem um telefone pr√≥prio, ent√£o o input() est√° dentro de um m√©todo normal (self).
'''
class Cliente:
    def __init__(self, nome, telefone):
        self.nome = nome
        self.telefone = telefone

    def atualizar_telefone(self):
        """Solicita um novo telefone e atualiza o atributo do objeto."""
        novo_telefone = input(f"Digite o novo telefone de {self.nome}: ")
        self.telefone = novo_telefone
        print(f"Telefone atualizado para {self.telefone}")

# Criando um cliente
cliente1 = Cliente("Jo√£o", "9999-8888")

# Atualizando o telefone (chamando o m√©todo de inst√¢ncia)
cliente1.atualizar_telefone()
# ‚úÖ Por que self?
#	‚Ä¢	O telefone pertence a um cliente espec√≠fico, ent√£o usamos self.telefone.




'''
üîµ Caso 2: Os inputs precisam acessar a classe (cls)?

üîπ Quando usar @classmethod
‚û° Isso acontece quando os inputs s√£o usados para criar um novo objeto da classe.

üìå Exemplo: Criar um novo funcion√°rio no sistema

Aqui, estamos pedindo os dados do funcion√°rio e criando um objeto com essas informa√ß√µes.
'''
class Funcionario:
    def __init__(self, nome, cargo, salario):
        self.nome = nome
        self.cargo = cargo
        self.salario = salario

    @classmethod
    def cadastrar_funcionario(cls):
        """Solicita os dados e cria um novo funcion√°rio."""
        nome = input("Nome do funcion√°rio: ")
        cargo = input("Cargo: ")
        salario = float(input("Sal√°rio: "))
        return cls(nome, cargo, salario)

# Criando um novo funcion√°rio chamando o m√©todo de classe
novo_funcionario = Funcionario.cadastrar_funcionario()

# Exibindo os detalhes do funcion√°rio criado
print(f"Funcion√°rio cadastrado: {novo_funcionario.nome}, {novo_funcionario.cargo}, R${novo_funcionario.salario:.2f}")
# ‚úÖ Por que cls?
#	‚Ä¢	O m√©todo precisa criar um novo funcion√°rio (cls(nome, cargo, salario)).




'''
üü† Caso 3: Os inputs s√£o apenas auxiliares e n√£o precisam criar nada?

üîπ Quando usar @staticmethod
‚û° Isso acontece quando os inputs servem apenas para validar ou processar alguma informa√ß√£o, sem precisar criar objetos ou acessar atributos da classe.

üìå Exemplo: Validar se um sal√°rio √© positivo antes de cadastr√°-lo

Aqui, o m√©todo verifica se um sal√°rio informado pelo usu√°rio √© v√°lido antes de ser usado.
'''
class SalarioHelper:
    @staticmethod
    def validar_salario():
        """Solicita um sal√°rio e verifica se √© v√°lido."""
        salario = float(input("Digite o sal√°rio: "))
        if salario > 0:
            print(f"Sal√°rio de R${salario:.2f} √© v√°lido!")
            return salario
        else:
            print("Erro: O sal√°rio deve ser maior que zero.")
            return None

# Chamando o m√©todo diretamente sem precisar de um objeto
salario_validado = SalarioHelper.validar_salario()
# ‚úÖ Por que @staticmethod?
#	‚Ä¢	O m√©todo n√£o precisa acessar atributos da classe (cls) nem do objeto (self).
#	‚Ä¢	Ele s√≥ verifica uma informa√ß√£o e retorna um valor v√°lido.